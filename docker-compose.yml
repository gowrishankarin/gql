# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  server:
    stdin_open: true
    tty: true
    container_name: curiosity-server
    env_file: docker/server/dev/.env
    build:
      context: .
      dockerfile: docker/server/dev/Dockerfile
    environment:
      NODE_ENV: ${NODE_ENV}
      HTTP_ORIGIN: https://localhost:3000
      PORT: ${PORT}
      ORIGIN_PORT: ${ORIGIN_PORT}
      MONGO_URI: $MONGO_URI}
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      JWT_SECRET: $JWT_SECRET
    ports:
      - 4000:4000
    # volumes:
    #   - ./app:/server
  # client:
  #   build:
  #     context: .
  #     dockerfile: docker/client/dev/Dockerfile
  #   environment:
  #     APP_ENV: development
  #     APP_URL: localhost:3000
  #     SERVER_HOST: server:4000
  #   ports:
  #     - 3000:3000

# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker-compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt

